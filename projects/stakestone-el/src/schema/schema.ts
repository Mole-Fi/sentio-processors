/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */
import { entity, derivedFrom, Timestamp, Int, Float, String, Bytes, Boolean, ID, Entity, Store } from '@sentio/sdk/store'
import { BigDecimalConverter, BigIntConverter, IntConverter, StringConverter, IDConverter, BooleanConverter, BytesConverter, TimestampConverter, FloatConverter, StructConverter, required_, array_, enumerate_, objectId_ } from '@sentio/sdk/store'
import { DatabaseSchema, BigDecimal } from "@sentio/sdk"
type BigInt = bigint

type AccountSnapshotData = AccountSnapshot

@entity("AccountSnapshot")
export class AccountSnapshot extends Entity {
  static entityConverter = new StructConverter({
 		id: required_(StringConverter),
		epochMilli: required_(BigIntConverter),
		stETHBalance: required_(StringConverter), 
})
  constructor(data: Partial<AccountSnapshotData>) {
    super(AccountSnapshot.entityConverter.from(data))
  }
	get id(): String { return this.get("id", required_(StringConverter)) }
  set id(value: String) { this.set("id", value, required_(StringConverter)) }
	get epochMilli(): BigInt { return this.get("epochMilli", required_(BigIntConverter)) }
  set epochMilli(value: BigInt) { this.set("epochMilli", value, required_(BigIntConverter)) }
	get stETHBalance(): String { return this.get("stETHBalance", required_(StringConverter)) }
  set stETHBalance(value: String) { this.set("stETHBalance", value, required_(StringConverter)) }
}

const source = `type AccountSnapshot @entity {
  id: String!,
  epochMilli: BigInt!
  stETHBalance: String!
}

  `
DatabaseSchema.register({
  source,
  entities: {
    "AccountSnapshot": AccountSnapshot
  }
})
